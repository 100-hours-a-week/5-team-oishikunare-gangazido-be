on:
  push:
    branches:
      - feature/map

name: 🚀 Blue-Green Deployment (Stable)

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Ensure JAVA_HOME is set correctly
        run: echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV

      - name: Debug JAVA_HOME
        run: echo $JAVA_HOME  # 현재 JAVA_HOME 경로 출력 (디버깅용)

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      - name: Build Spring Boot Application
        run: |
          chmod +x gradlew
          ./gradlew clean bootJar

      - name: Ensure JAR File Exists
        run: |
          ls -lh build/libs/
          if [ ! -f build/libs/*.jar ]; then
            echo "🚨 JAR 파일이 존재하지 않습니다. 빌드를 확인하세요!"
            exit 1
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine Active Environment
        id: active_env
        run: |
          echo "🔍 현재 트래픽을 받고 있는 Target Group을 확인 중..."

          CURRENT_ACTIVE_TARGET_GROUP=$(aws elbv2 describe-rules \
          --listener-arn ${{ secrets.ALB_LISTENER_ARN }} \
          --region ap-northeast-2 \
          --query 'Rules[*].Actions[0].ForwardConfig.TargetGroups[*]' \
          --output json | \
          grep -B1 '"Weight": 1' | grep 'TargetGroupArn' | head -n1 | \
          sed 's/.*"TargetGroupArn": "\(.*\)",/\1/')

          echo "현재 활성화된 Target Group ARN: $CURRENT_ACTIVE_TARGET_GROUP"

          if [[ "$CURRENT_ACTIVE_TARGET_GROUP" == "${{ secrets.BLUE_TARGET_GROUP_ARN }}" ]]; then
          echo "✅ BLUE가 활성화됨, GREEN에 배포"
          echo "DEPLOY_ENV=GREEN" >> $GITHUB_ENV
          echo "NEW_ASG=gangazido-prod-green" >> $GITHUB_ENV
          echo "NEW_TARGET_GROUP=${{ secrets.GREEN_TARGET_GROUP_ARN }}" >> $GITHUB_ENV
          echo "OLD_ASG=gangazido-prod-blue" >> $GITHUB_ENV
          elif [[ "$CURRENT_ACTIVE_TARGET_GROUP" == "${{ secrets.GREEN_TARGET_GROUP_ARN }}" ]]; then
          echo "✅ GREEN이 활성화됨, BLUE에 배포"
          echo "DEPLOY_ENV=BLUE" >> $GITHUB_ENV
          echo "NEW_ASG=gangazido-prod-blue" >> $GITHUB_ENV
          echo "NEW_TARGET_GROUP=${{ secrets.BLUE_TARGET_GROUP_ARN }}" >> $GITHUB_ENV
          echo "OLD_ASG=gangazido-prod-green" >> $GITHUB_ENV
          else
          echo "🚨 활성화된 Target Group을 판별할 수 없습니다."
          exit 1
          fi

      - name: Debug Deployment Variables
        run: |
          echo "🚀 배포 대상 ASG: $NEW_ASG"
          echo "🎯 새로운 Target Group: $NEW_TARGET_GROUP"
          echo "🛑 기존 운영 ASG: $OLD_ASG"
          echo "📌 배포할 이미지 태그: $DEPLOY_ENV"

      # 1. Green 환경 스케일 업 및 헬스체크 준비
      - name: Scale Up Temporary (Green) Auto Scaling Group (${{ env.NEW_ASG }})
        run: |
          aws autoscaling update-auto-scaling-group \
          --auto-scaling-group-name ${{ env.NEW_ASG }} \
          --desired-capacity 4 --min-size 2 --max-size 5

      - name: Start Green ASG Instance Refresh
        run: |
          STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $NEW_ASG \
          --query 'InstanceRefreshes[0].Status' --output text 2>/dev/null || echo "None")

          if [[ "$STATUS" == "InProgress" ]]; then
            echo "🚨 현재 ASG($NEW_ASG)의 인스턴스 리프레시가 이미 진행 중입니다. 대기합니다."
            exit 0
          fi

          echo "🔄 Green ASG($NEW_ASG) 인스턴스 리프레시 시작"
          aws autoscaling start-instance-refresh --auto-scaling-group-name $NEW_ASG

      - name: Wait Until Green ASG is Healthy
        run: |
          MAX_WAIT=720  # 최대 12분
          INTERVAL=10
          ELAPSED=0

          echo "⏳ Green ASG($NEW_ASG)의 헬스체크 상태를 확인 중..."

          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name $NEW_ASG \
              --query 'InstanceRefreshes[0].Status' --output text 2>/dev/null || echo "None")

            echo "현재 상태: $STATUS"

            if [[ "$STATUS" == "Successful" ]]; then
              echo "✅ Green ASG 인스턴스가 모두 정상입니다!"
              break
            elif [[ "$STATUS" == "Failed" || "$STATUS" == "Cancelled" ]]; then
              echo "🚨 인스턴스 리프레시 실패: 상태 $STATUS"
              exit 1
            fi

            if [[ "$ELAPSED" -ge "$MAX_WAIT" ]]; then
              echo "🚨 타임아웃: $MAX_WAIT초 안에 헬스체크가 완료되지 않았습니다."
              exit 1
            fi

            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done

      # 2. ALB를 Green으로 전환
      - name: Gradually Shift Traffic to New Environment
        run: |
          if [[ "$CURRENT_ACTIVE_TARGET_GROUP" == "$NEW_TARGET_GROUP" ]]; then
            echo "⚠️ 새로운 Target Group이 이미 운영 중입니다. 트래픽 변경을 건너뜁니다."
          else
            aws elbv2 modify-listener --listener-arn ${{ secrets.ALB_LISTENER_ARN }} \
              --default-actions '[{"Type": "forward", "ForwardConfig": {"TargetGroups": [
                {"TargetGroupArn": "'$CURRENT_ACTIVE_TARGET_GROUP'", "Weight": 50},
                {"TargetGroupArn": "'$NEW_TARGET_GROUP'", "Weight": 50}
              ]}}]'
            sleep 30  # 트래픽 분배 대기
          fi

      - name: Fully Shift Traffic to New Environment
        run: |
          echo "🔄 ALB 트래픽을 완전히 새로운 환경($DEPLOY_ENV)으로 전환"
          CURRENT_ACTIVE_TARGET_GROUP=$(aws elbv2 describe-rules \
            --listener-arn ${{ secrets.ALB_LISTENER_ARN }} \
            --query 'Rules[?Conditions[?Field==`host-header`]].Actions[0].ForwardConfig.TargetGroups | sort_by(@, &Weight)[-1].TargetGroupArn' \
            --output text)

          if [[ "$CURRENT_ACTIVE_TARGET_GROUP" == "$NEW_TARGET_GROUP" ]]; then
            echo "⚠️ 이미 $NEW_TARGET_GROUP이 100% 트래픽을 받고 있습니다. 변경하지 않습니다."
          else
            aws elbv2 modify-listener --listener-arn ${{ secrets.ALB_LISTENER_ARN }} \
              --default-actions '[{"Type": "forward", "ForwardConfig": {"TargetGroups": [
                {"TargetGroupArn": "'$NEW_TARGET_GROUP'", "Weight": 100}
              ]}}]'
            echo "✅ 트래픽이 완전히 새로운 환경($DEPLOY_ENV)으로 이동했습니다."
          fi

#      # 3. Blue ASG 인스턴스를 모두 제거 (트래픽 차단)
#      - name: Scale Down Current (Blue) ASG (${{ env.OLD_ASG }})
#        run: |
#          echo "🧹 Blue ASG($OLD_ASG) 인스턴스 수를 0으로 조정 중..."
#          aws autoscaling update-auto-scaling-group \
#            --auto-scaling-group-name ${{ env.OLD_ASG }} \
#            --desired-capacity 0 --min-size 0 --max-size 5
      #지운다?

      # 4. Blue ASG에 새로운 코드 배포
      - name: Build and Push Docker Image to Blue
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com
          ECR_REPOSITORY: gangazido-backend
        run: |
          IMAGE_TAG=$(echo "${DEPLOY_ENV}" | tr '[:upper:]' '[:lower:]')

          echo "🐳 Building Docker image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

          if [[ -z "$IMAGE_TAG" ]]; then
            echo "🚨 IMAGE_TAG 값이 비어 있습니다!"
            exit 1
          fi

          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # 5. Blue 환경 스케일 업하여 새 코드 적용
      - name: Re-Scale Blue ASG with New Code
        run: |
          echo "🚀 Blue ASG($OLD_ASG)에 새 이미지로 인스턴스를 재생성합니다."
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name ${{ env.OLD_ASG }} \
            --desired-capacity 2 --min-size 2 --max-size 5

      - name: Refresh Blue ASG to Apply New Image
        run: |
          aws autoscaling start-instance-refresh --auto-scaling-group-name $OLD_ASG

      # 6. Green 환경은 다시 축소
      - name: Scale Down Green ASG
        run: |
          echo "✅ Green ASG($NEW_ASG)를 축소합니다."
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name ${{ env.NEW_ASG }} \
            --desired-capacity 2 --min-size 2 --max-size 5
