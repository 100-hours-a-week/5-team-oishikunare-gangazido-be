on:
  push:
    branches:
      - feature/map

name: 🚀 Blue-Green Deployment (Auto-Sync Latest Version)

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-northeast-2 | \
          docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com

      - name: Determine Active Environment
        id: active_env
        run: |
          CURRENT_TARGET_GROUP=$(aws elbv2 describe-listeners --listener-arn ${{ secrets.ALB_LISTENER_ARN }} \
          --query 'Listeners[0].DefaultActions[0].TargetGroupArn' --output text)

          echo "Current Target Group: $CURRENT_TARGET_GROUP"

          if [[ "$CURRENT_TARGET_GROUP" == "${{ secrets.BLUE_TARGET_GROUP_ARN }}" ]]; then
            echo "BLUE is active, switching to GREEN"
            echo "DEPLOY_ENV=GREEN" >> $GITHUB_ENV
            echo "NEW_ASG=gangazido-prod-green" >> $GITHUB_ENV
            echo "NEW_TARGET_GROUP=${{ secrets.GREEN_TARGET_GROUP_ARN }}" >> $GITHUB_ENV
            echo "OLD_ASG=gangazido-prod-blue" >> $GITHUB_ENV
          else
            echo "GREEN is active, switching to BLUE"
            echo "DEPLOY_ENV=BLUE" >> $GITHUB_ENV
            echo "NEW_ASG=gangazido-prod-blue" >> $GITHUB_ENV
            echo "NEW_TARGET_GROUP=${{ secrets.BLUE_TARGET_GROUP_ARN }}" >> $GITHUB_ENV
            echo "OLD_ASG=gangazido-prod-green" >> $GITHUB_ENV
          fi

      - name: Scale Up Active ASG (${{ env.OLD_ASG }})
        run: |
          echo "🔄 Scaling up ${{ env.OLD_ASG }} for handling traffic..."
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name ${{ env.OLD_ASG }} \
            --desired-capacity 4 \
            --min-size 4 \
            --max-size 6

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com/gangazido-backend:latest .
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com/gangazido-backend:latest

      - name: Update New Auto Scaling Group (${{ env.NEW_ASG }})
        run: |
          aws autoscaling start-instance-refresh --auto-scaling-group-name ${{ env.NEW_ASG }}

      - name: Wait for New ASG to be Healthy
        run: |
          sleep 180  # 인스턴스 헬스체크 대기

      - name: Switch ALB to New Target Group (${{ env.NEW_TARGET_GROUP }})
        run: |
          aws elbv2 modify-listener --listener-arn ${{ secrets.ALB_LISTENER_ARN }} \
            --default-actions Type=forward,TargetGroupArn=${{ env.NEW_TARGET_GROUP }}

      # ✅ 배포 완료 후, OLD ASG도 최신 버전으로 업데이트
      - name: Sync OLD ASG to Latest Version (${{ env.OLD_ASG }})
        run: |
          echo "🔄 Syncing ${{ env.OLD_ASG }} with latest version..."
          aws autoscaling start-instance-refresh --auto-scaling-group-name ${{ env.OLD_ASG }}

      # ✅ 인스턴스 업데이트 후 OLD ASG를 다시 0으로 설정
      - name: Restore OLD ASG to 0 (${{ env.OLD_ASG }})
        run: |
          sleep 60  # 안정성 확인을 위해 대기 시간 추가
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name ${{ env.OLD_ASG }} \
            --desired-capacity 0 \
            --min-size 0 \
            --max-size 0
