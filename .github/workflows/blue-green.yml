on:
  push:
    branches:
      - feature/map  # main Î∏åÎûúÏπòÏóê Ìë∏ÏãúÎê† Îïå Ïã§Ìñâ

name: üöÄ Blue-Green Deployment (Stable)

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Ensure JAVA_HOME is set correctly
        run: echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV

      - name: Debug JAVA_HOME
        run: echo $JAVA_HOME  # ÌòÑÏû¨ JAVA_HOME Í≤ΩÎ°ú Ï∂úÎ†• (ÎîîÎ≤ÑÍπÖÏö©)

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      - name: Build Spring Boot Application
        run: |
          chmod +x gradlew
          ./gradlew clean bootJar

      - name: Ensure JAR File Exists
        run: |
          ls -lh build/libs/
          if [ ! -f build/libs/*.jar ]; then
            echo "üö® JAR ÌååÏùºÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§. ÎπåÎìúÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî!"
            exit 1
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine Active Environment
        id: active_env
        run: |
          CURRENT_TARGET_GROUP=$(aws elbv2 describe-listeners --listener-arn ${{ secrets.ALB_LISTENER_ARN }} \
          --query 'Listeners[0].DefaultActions[0].TargetGroupArn' --output text)

          echo "Current Target Group: $CURRENT_TARGET_GROUP"

          if [[ "$CURRENT_TARGET_GROUP" == "${{ secrets.BLUE_TARGET_GROUP_ARN }}" ]]; then
            echo "BLUE is active, switching to GREEN"
            echo "DEPLOY_ENV=GREEN" >> $GITHUB_ENV
            echo "NEW_ASG=gangazido-prod-green" >> $GITHUB_ENV
            echo "NEW_TARGET_GROUP=${{ secrets.GREEN_TARGET_GROUP_ARN }}" >> $GITHUB_ENV
            echo "OLD_ASG=gangazido-prod-blue" >> $GITHUB_ENV
          else
            echo "GREEN is active, switching to BLUE"
            echo "DEPLOY_ENV=BLUE" >> $GITHUB_ENV
            echo "NEW_ASG=gangazido-prod-blue" >> $GITHUB_ENV
            echo "NEW_TARGET_GROUP=${{ secrets.BLUE_TARGET_GROUP_ARN }}" >> $GITHUB_ENV
            echo "OLD_ASG=gangazido-prod-green" >> $GITHUB_ENV
          fi

      - name: Scale Up Active Auto Scaling Group (${{ env.OLD_ASG }})
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name ${{ env.OLD_ASG }} \
            --desired-capacity 4 --min-size 2 --max-size 5  # Ìä∏ÎûòÌîΩ Ï≤òÎ¶¨Îüâ Ï¶ùÍ∞Ä

      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com
          ECR_REPOSITORY: gangazido-backend
        run: |
          DEPLOY_ENV_LOWER=$(echo "${DEPLOY_ENV}" | tr '[:upper:]' '[:lower:]')
          IMAGE_TAG=$DEPLOY_ENV_LOWER

          echo "üê≥ Building Docker image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

          echo "üì§ Pushing Docker image..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update New Auto Scaling Group (${{ env.NEW_ASG }})
        run: |
          aws autoscaling start-instance-refresh --auto-scaling-group-name ${{ env.NEW_ASG }}

      - name: Wait for New ASG to be Healthy
        run: |
          sleep 120  # Ïù∏Ïä§ÌÑ¥Ïä§ Ìó¨Ïä§Ï≤¥ÌÅ¨ ÎåÄÍ∏∞

      - name: Switch ALB to New Target Group (${{ env.NEW_TARGET_GROUP }})
        run: |
          aws elbv2 modify-listener --listener-arn ${{ secrets.ALB_LISTENER_ARN }} \
            --default-actions Type=forward,TargetGroupArn=${{ env.NEW_TARGET_GROUP }}

      - name: Health Check after Deployment
        run: |
          ALB_URL="https://gangazido-alb-2142561859.ap-northeast-2.elb.amazonaws.com"

          for i in {1..10}; do
            STATUS=$(curl -o /dev/null -s -w "%{http_code}" $ALB_URL)

            if [[ "$STATUS" == "200" ]]; then
              echo "‚úÖ Î∞∞Ìè¨ ÏÑ±Í≥µ: HTTP 200"
              exit 0
            fi

            echo "‚è≥ Ìó¨Ïä§ Ï≤¥ÌÅ¨ ÎåÄÍ∏∞ Ï§ë... ($i/10)"
            sleep 10
          done

          echo "üö® Î∞∞Ìè¨ Ïã§Ìå®: Ï†ïÏÉÅ ÏùëÎãµ ÏóÜÏùå"
          exit 1

      - name: Terminate Old Auto Scaling Group (${{ env.OLD_ASG }})
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name ${{ env.OLD_ASG }} \
            --desired-capacity 2 --min-size 2 --max-size 5

      - name: Refresh Old Auto Scaling Group (${{ env.OLD_ASG }})
        run: |
          aws autoscaling start-instance-refresh --auto-scaling-group-name ${{ env.OLD_ASG }}
