on:
  push:
    branches:
      - feature/map

name: 🚀 Blue-Green Deployment (Stable)

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Ensure JAVA_HOME is set correctly
        run: echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV

      - name: Debug JAVA_HOME
        run: echo $JAVA_HOME  # 현재 JAVA_HOME 경로 출력 (디버깅용)

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      - name: Build Spring Boot Application
        run: |
          chmod +x gradlew
          ./gradlew clean bootJar

      - name: Ensure JAR File Exists
        run: |
          ls -lh build/libs/
          if [ ! -f build/libs/*.jar ]; then
            echo "🚨 JAR 파일이 존재하지 않습니다. 빌드를 확인하세요!"
            exit 1
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine Active Environment
        id: active_env
        run: |
          CURRENT_TARGET_GROUP=$(aws elbv2 describe-listeners --listener-arn ${{ secrets.ALB_LISTENER_ARN }} \
          --query 'Listeners[0].DefaultActions[0].TargetGroupArn' --output text)

          echo "현재 활성화된 Target Group: $CURRENT_TARGET_GROUP"

          if [[ "$CURRENT_TARGET_GROUP" == "${{ secrets.BLUE_TARGET_GROUP_ARN }}" ]]; then
            echo "BLUE가 활성화됨, GREEN에 배포"
            echo "DEPLOY_ENV=GREEN" >> $GITHUB_ENV
            echo "NEW_ASG=gangazido-prod-green" >> $GITHUB_ENV
            echo "NEW_TARGET_GROUP=${{ secrets.GREEN_TARGET_GROUP_ARN }}" >> $GITHUB_ENV
            echo "OLD_ASG=gangazido-prod-blue" >> $GITHUB_ENV
          else
            echo "GREEN이 활성화됨, BLUE에 배포"
            echo "DEPLOY_ENV=BLUE" >> $GITHUB_ENV
            echo "NEW_ASG=gangazido-prod-blue" >> $GITHUB_ENV
            echo "NEW_TARGET_GROUP=${{ secrets.BLUE_TARGET_GROUP_ARN }}" >> $GITHUB_ENV
            echo "OLD_ASG=gangazido-prod-green" >> $GITHUB_ENV
          fi

      - name: Debug Deployment Variables
        run: |
          echo "🚀 배포 대상 ASG: $NEW_ASG"
          echo "🎯 새로운 Target Group: $NEW_TARGET_GROUP"
          echo "🛑 기존 운영 ASG: $OLD_ASG"

      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com
          ECR_REPOSITORY: gangazido-backend
        run: |
          IMAGE_TAG=$(echo "${DEPLOY_ENV}" | tr '[:upper:]' '[:lower:]')

          echo "🐳 Building Docker image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

          if [[ -z "$IMAGE_TAG" ]]; then
            echo "🚨 IMAGE_TAG 값이 비어 있습니다!!!"
            exit 1
          fi

          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Start New ASG Instance Refresh
        run: |
          STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $NEW_ASG \
          --query 'InstanceRefreshes[0].Status' --output text 2>/dev/null || echo "None")

          if [[ "$STATUS" == "InProgress" ]]; then
            echo "🚨 현재 ASG($NEW_ASG)의 인스턴스 리프레시가 이미 진행 중입니다. 대기합니다."
            exit 0
          fi

          echo "🔄 새로운 ASG($NEW_ASG) 인스턴스 리프레시 시작"
          aws autoscaling start-instance-refresh --auto-scaling-group-name $NEW_ASG

      - name: Wait for New ASG to be Healthy
        run: |
          echo "⏳ 새로운 ASG가 헬스체크를 통과할 때까지 대기..."
          sleep 60

      - name: Verify New ASG Instances
        run: |
          STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $NEW_ASG \
          --query 'InstanceRefreshes[0].Status' --output text 2>/dev/null || echo "None")

          if [[ "$STATUS" != "Successful" ]]; then
            echo "🚨 새로운 ASG($NEW_ASG)의 헬스체크가 완료되지 않았습니다!"
            exit 1
          fi

      - name: Switch ALB to New Target Group
        run: |
          echo "🔄 ALB를 새로운 Target Group($NEW_TARGET_GROUP)으로 변경 중..."
          aws elbv2 modify-listener --listener-arn ${{ secrets.ALB_LISTENER_ARN }} \
            --default-actions Type=forward,TargetGroupArn=$NEW_TARGET_GROUP

      - name: Verify New ALB Health
        run: |
          ALB_URL="http://gangazido-alb-2142561859.ap-northeast-2.elb.amazonaws.com"

          for i in {1..10}; do
            STATUS=$(curl -o /dev/null -s -w "%{http_code}" $ALB_URL)

            if [[ "$STATUS" == "200" ]]; then
              echo "✅ 배포 성공: HTTP 200"
              exit 0
            fi

            echo "⏳ ALB 헬스 체크 중... ($i/10)"
            sleep 3
          done

          echo "🚨 배포 실패: 정상 응답 없음"
          exit 1

      - name: Cleanup Old Auto Scaling Group
        run: |
          echo "🛑 기존 ASG($OLD_ASG) 인스턴스 리프레시 시작"
          aws autoscaling start-instance-refresh --auto-scaling-group-name $OLD_ASG
