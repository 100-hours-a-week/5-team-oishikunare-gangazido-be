name: Release

on:
  push:
    branches:
      - main
    # 프로젝트 진행할 땐 브랜치를 production으로 수정하여 프로덕션 릴리즈가 가능하도록 수정
    # 오 되나?

jobs:
  auto_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: gradle

      - name: Git 설정 (GitHub 시크릿 사용)
        run: |
          git config --global user.name '${{ secrets.GIT_USER_NAME }}'
          git config --global user.email '${{ secrets.GIT_USER_EMAIL }}'

      - name: Check for release commit
        id: check_release
        run: |
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          echo "최근 커밋 메시지: $COMMIT_MSG"
          if [[ "$COMMIT_MSG" == release:* ]]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Axion Release (버전 업데이트 및 태그 생성)
        if: steps.check_release.outputs.is_release == 'true'
        run: ./gradlew release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TC }}

      - name: Get new version from Axion
        if: steps.check_release.outputs.is_release == 'true'
        id: get_version
        run: |
          TAG_NAME=$(./gradlew printVersion -q | tr -d '[:space:]')
          echo "new_version=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.check_release.outputs.is_release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.new_version }}
          name: Release v${{ steps.get_version.outputs.new_version }}
          body: |
            ### 🔥 릴리즈 노트
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TC }}
