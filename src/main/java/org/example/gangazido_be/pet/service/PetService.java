package org.example.gangazido_be.pet.service;

import java.io.File;
import java.io.IOException;
import java.util.UUID;

import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import org.example.gangazido_be.pet.dto.PetResponse;
import org.example.gangazido_be.pet.entity.Pet;
import org.example.gangazido_be.pet.exception.PetException;
import org.example.gangazido_be.pet.exception.PetExceptionType;
import org.example.gangazido_be.pet.exception.PetNotFoundException;
import org.example.gangazido_be.pet.exception.UserNotFoundException;
import org.example.gangazido_be.pet.repository.PetRepository;
import org.example.gangazido_be.user.entity.User;
import org.example.gangazido_be.user.repository.UserRepository;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

@Slf4j
@Service
@RequiredArgsConstructor
public class PetService {
	private final PetRepository petRepository;
	private final UserRepository userRepository;

	@Value("${app.pet.upload.dir}")
	private final String uploadDir;

	// ÏÑúÎ≤Ñ ÏãúÏûë Ïãú ÏóÖÎ°úÎìú ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ± ÌôïÏù∏
	@PostConstruct
	public void initUploadDirectory() {
		File uploadPath = new File(uploadDir);
		if (!uploadPath.exists() && !uploadPath.mkdirs()) {
			throw new RuntimeException("‚ùå ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ± Ïã§Ìå®: " + uploadDir);
		}
		System.out.println("‚úÖ ÌååÏùº ÏóÖÎ°úÎìú ÎîîÎ†âÌÜ†Î¶¨ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å: " + uploadDir);
	}

	// Î∞òÎ†§Í≤¨ Ï†ïÎ≥¥ Îì±Î°ù
	@Transactional
	public PetResponse createPet(Integer userId, String name, Integer age, Boolean gender, String breed, Double weight, MultipartFile petProfileImage) {
		String petProfileImagePath = null;

		// ÏÇ¨Ïö©Ïûê Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏ (ÏóÜÏúºÎ©¥ 404  ÏòàÏô∏)
		User user = userRepository.findByIdAndDeletedAtIsNull(userId) // userIdÎ°ú User ÏóîÌã∞Ìã∞ Ï°∞Ìöå
			.orElseThrow(() -> new PetException(HttpStatus.NOT_FOUND, PetExceptionType.NOT_FOUND_USER.getMessage()));

		// Ïù¥ÎØ∏ Ìï¥Îãπ userIdÎ°ú petÏù¥ Ï°¥Ïû¨ÌïúÎã§Î©¥ ÏòàÏô∏ Ï≤òÎ¶¨
		if (petRepository.existsByUserIdAndDeletedAtIsNull(userId)) {
			throw new PetException(HttpStatus.CONFLICT, PetExceptionType.ALREADY_EXISTS_PET.getMessage());
		}

		// soft-deleteÎêú Î∞òÎ†§Í≤¨ ÏûàÎäîÏßÄ ÌôïÏù∏
		Pet deletedPet = petRepository.findByUserIdIncludingDeleted(userId)
			.filter(p -> p.getDeletedAt() != null)
			.orElse(null);

		if (deletedPet != null) {
			log.debug("‚úîÔ∏è ÏÜåÌîÑÌä∏ ÏÇ≠Ï†úÎêú Î∞òÎ†§Í≤¨ Î≥µÍµ¨ Î°úÏßÅ Ïã§ÌñâÎê®");

			deletedPet.setDeletedAt(null);
			deletedPet.setUser(user); // Ï§ëÏöî!!

			if (petProfileImage != null && !petProfileImage.isEmpty()) {
				petProfileImagePath = saveFile(petProfileImage);
			}

			deletedPet.updatePet(name, petProfileImagePath, age, gender, breed, weight);
			return PetResponse.from(petRepository.save(deletedPet));
		}

		// Ïú†Ìö®ÏÑ± Í≤ÄÏ¶ù
		if (name == null || name.isBlank()) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.REQUIRED_PET_NAME.getMessage());
		}
		if (!name.matches("^[a-zA-ZÍ∞Ä-Ìû£0-9 ]+$")) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.INVALID_PET_NAME_FORMAT.getMessage());
		}
		if (name.length() > 10) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.INVALID_PET_NAME_LENGTH.getMessage());
		}
		if (breed == null || breed.isBlank()) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.REQUIRED_PET_BREED.getMessage());
		}
		if (age <= 0 || age > 50) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.INVALID_PET_AGE_VALUE.getMessage());
		}
		if (weight < 0.1 || weight > 200.0) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.INVALID_PET_WEIGHT.getMessage());
		}
		if (gender == null) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.REQUIRED_PET_GENDER.getMessage());
		}
		if (breed == null || breed.isBlank()) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.REQUIRED_PET_BREED.getMessage());
		}
		if (age <= 0 || age > 50) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.INVALID_PET_AGE_VALUE.getMessage());
		}
		if (weight < 0.1 || weight > 200.0) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.INVALID_PET_WEIGHT.getMessage());
		}

		// ‚úÖ ÌååÏùº Ï†ÄÏû• Ï≤òÎ¶¨
		if (petProfileImage != null && !petProfileImage.isEmpty()) {
			petProfileImagePath = saveFile(petProfileImage);
		}

		// ÏóîÌã∞Ìã∞ ÏÉùÏÑ± Î∞è Ï†ÄÏû•
		Pet pet = Pet.builder()
			.user(user)
			.name(name)
			.petProfileImage(petProfileImagePath) // ‚úÖ Ï†ÄÏû•Îêú ÌååÏùº URL ÏÑ§Ï†ï
			.age(age)
			.gender(gender)
			.breed(breed)
			.weight(weight)
			.build();

		Pet savedPet = petRepository.save(pet);
		return PetResponse.from(savedPet);
	}

	@Transactional
	public PetResponse updatePetProfileImage(Integer userId, MultipartFile petProfileImage) {
		Pet pet = petRepository.findByUserId(userId)
			.orElseThrow(PetNotFoundException::new);

		// ‚úÖ Í∏∞Ï°¥ Ïù¥ÎØ∏ÏßÄ ÌååÏùº ÏÇ≠Ï†ú (ÏÑ†ÌÉùÏ†Å)
		deleteOldFile(pet.getPetProfileImage());

		// ‚úÖ ÏÉà Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû• ÌõÑ URL ÏÑ§Ï†ï
		String petProfileImageUrl = saveFile(petProfileImage);
		pet.setPetProfileImage(petProfileImageUrl);
		petRepository.save(pet);

		return PetResponse.from(pet);
	}

	private String saveFile(MultipartFile file) {
		if (file == null || file.isEmpty()) {
			return null;
		}
		String originalFileName = file.getOriginalFilename();
		if (originalFileName == null) {
			throw new RuntimeException("‚ùå ÏóÖÎ°úÎìúÎêú ÌååÏùº Ïù¥Î¶ÑÏù¥ nullÏûÖÎãàÎã§.");
		}

		String fileName = UUID.randomUUID() + "_" + originalFileName;
		String absoluteUploadDir = new File(uploadDir).getAbsolutePath(); // Ï†àÎåÄ Í≤ΩÎ°ú
		String fullPath = absoluteUploadDir + File.separator + fileName;

		File destination = new File(fullPath);
		File parentDir = destination.getParentFile();

		if (!parentDir.exists() && !parentDir.mkdirs()) {
			log.error("‚ùå ÏóÖÎ°úÎìú Ìè¥Îçî ÏÉùÏÑ± Ïã§Ìå®: {}", parentDir.getAbsolutePath());
			throw new RuntimeException("Ìè¥Îçî ÏÉùÏÑ± Ïã§Ìå®: " + parentDir.getAbsolutePath());
		}

		try {
			log.info("üìé ÏóÖÎ°úÎìúÎêú ÌååÏùºÎ™Ö: {}", originalFileName);
			log.info("üìÅ Ï†ÄÏû•Ìï† Ï†ÑÏ≤¥ Í≤ΩÎ°ú: {}", fullPath);
			file.transferTo(destination);
		} catch (IOException e) {
			log.error("‚ùå ÌååÏùº Ï†ÄÏû• Ïã§Ìå®! Í≤ΩÎ°ú: {}, ÏóêÎü¨: {}", fullPath, e.getMessage(), e);
			throw new RuntimeException("ÌååÏùº Ï†ÄÏû• Ïã§Ìå®", e);
		}

		// ÏõπÏóêÏÑú Ï†ëÍ∑º Í∞ÄÎä•Ìïú Í≤ΩÎ°úÎ°ú Î∞òÌôò
		return "/uploads/pet/" + fileName;
	}

	// ‚úÖ Í∏∞Ï°¥ Ïù¥ÎØ∏ÏßÄ ÌååÏùº ÏÇ≠Ï†ú Î©îÏÑúÎìú (ÏÑ†ÌÉùÏ†Å)
	private void deleteOldFile(String filePath) {
		if (filePath != null && filePath.startsWith("/uploads/pet/")) {
			File oldFile = new File(filePath);
			if (oldFile.exists()) {
				boolean deleted = oldFile.delete(); // ‚úÖ ÏÇ≠Ï†ú ÏÑ±Í≥µ Ïó¨Î∂Ä ÌôïÏù∏
				if (!deleted) {
					System.err.println("ÌååÏùº ÏÇ≠Ï†ú Ïã§Ìå®: " + oldFile.getAbsolutePath()); // ‚úÖ ÏÇ≠Ï†ú Ïã§Ìå® Ïãú Î°úÍ∑∏ Ï∂úÎ†•
				}
			}
		}
	}

	// Î∞òÎ†§Í≤¨ Ï†ïÎ≥¥ Ï°∞Ìöå
	@Transactional(readOnly = true)
	public PetResponse getPet(Integer userId) {
		// ÏÇ¨Ïö©ÏûêÍ∞Ä Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏ (ÏóÜÏúºÎ©¥ 404 ÏòàÏô∏)
		User user = userRepository.findById(userId)
			.orElseThrow(() -> new PetException(HttpStatus.NOT_FOUND, PetExceptionType.NOT_FOUND_USER.getMessage()));

		// Ìï¥Îãπ ÏÇ¨Ïö©ÏûêÏùò Î∞òÎ†§Í≤¨ Ï†ïÎ≥¥ Ï°∞Ìöå (ÏóÜÏúºÎ©¥ 404 ÏòàÏô∏)
		Pet pet = petRepository.findByUserId(userId)
			.orElseThrow(PetNotFoundException::new);

		return PetResponse.from(pet);
	}

	// Î∞òÎ†§Í≤¨ Ï†ïÎ≥¥ ÏàòÏ†ï
	@Transactional
	public PetResponse updatePet(Integer userId,  String name, Integer age, Boolean gender, String breed, Double weight, MultipartFile petProfileImage) {
		// ÏÇ¨Ïö©Ïûê Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏ (ÏóÜÏúºÎ©¥ 404 ÏòàÏô∏)
		User user = userRepository.findById(userId)
			.orElseThrow(UserNotFoundException::new);

		// Ïú†Ï†ÄÎäî ÏûàÏßÄÎßå Pet Ï†ïÎ≥¥Í∞Ä ÏóÜÎäî Í≤ΩÏö∞ (404 ÏòàÏô∏)
		Pet pet = petRepository.findByUserId(userId)
			.orElseThrow(PetNotFoundException::new);

		// Î≥∏Ïù∏ Î∞òÎ†§Í≤¨Ïù∏ÏßÄ ÌôïÏù∏ (403 ÏòàÏô∏)
		if (!pet.getUser().getId().equals(userId)) {
			throw new PetException(HttpStatus.FORBIDDEN, PetExceptionType.REQUIRED_PERMISSION.getMessage());
		}

		// ÌïÑÏàò Í∞í Í≤ÄÏ¶ù
		if (name == null || name.isBlank()) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.REQUIRED_PET_NAME.getMessage());
		}
		if (!name.matches("^[a-zA-ZÍ∞Ä-Ìû£]+$")) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.INVALID_PET_NAME_FORMAT.getMessage());
		}
		if (name.length() > 10) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.INVALID_PET_NAME_LENGTH.getMessage());
		}
		if (age == null) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.REQUIRED_PET_AGE.getMessage());
		}
		if (age <= 0 || age > 50) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.INVALID_PET_AGE_VALUE.getMessage());
		}
		if (weight == null) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.REQUIRED_PET_WEIGHT.getMessage());
		}
		if (weight < 0.1 || weight > 200.0) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.INVALID_PET_WEIGHT.getMessage());
		}
		if (breed == null || breed.isBlank()) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.REQUIRED_PET_BREED.getMessage());
		}

		// ‚úÖ petProfileImage requestÏóêÏÑú Í∞ÄÏ†∏Ïò§ÏßÄ ÏïäÍ≥† ÏßÅÏ†ë MultipartFileÏóêÏÑú Ï≤òÎ¶¨
		String petProfileImageUrl = (petProfileImage != null && !petProfileImage.isEmpty()) ? saveFile(petProfileImage) : null;

		pet.updatePet(
			name,
			petProfileImageUrl,  // ‚úÖ Ïó¨Í∏∞ÏÑú MultipartFile ‚Üí String URL Î≥ÄÌôò
			age,
			gender,
			breed,
			weight
		);
		return PetResponse.from(pet);
	}

	// Î∞òÎ†§Í≤¨ Ï†ïÎ≥¥ ÏÇ≠Ï†ú
	@Transactional
	public void deletePet(Integer userId) {
		// ÏÇ¨Ïö©Ïûê Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏ (ÏóÜÏúºÎ©¥ 404 ÏòàÏô∏)
		User user = userRepository.findById(userId)
			.orElseThrow(UserNotFoundException::new);

		// Î∞òÎ†§Í≤¨ Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏ (ÏóÜÏúºÎ©¥ 404 ÏòàÏô∏)
		Pet pet = petRepository.findByUserId(userId)
			.orElseThrow(PetNotFoundException::new);

		// Î≥∏Ïù∏ Î∞òÎ†§Í≤¨Ïù∏ÏßÄ ÌôïÏù∏ (403 ÏòàÏô∏)
		if (!pet.getUser().getId().equals(userId)) {
			throw new PetException(HttpStatus.FORBIDDEN, PetExceptionType.REQUIRED_PERMISSION.getMessage());
		}

		pet.onSoftDelete();
		petRepository.save(pet);
	}
}
