package org.example.gangazido_be.pet.service;

import java.io.File;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import org.example.gangazido_be.pet.dto.PetResponse;
import org.example.gangazido_be.pet.entity.Pet;
import org.example.gangazido_be.pet.exception.PetException;
import org.example.gangazido_be.pet.exception.PetExceptionType;
import org.example.gangazido_be.pet.repository.PetRepository;
import org.example.gangazido_be.user.entity.User;
import org.example.gangazido_be.user.repository.UserRepository;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Slf4j
@Service
@RequiredArgsConstructor
public class PetService {
	private final PetRepository petRepository;
	private final UserRepository userRepository;

	// Î∞òÎ†§Í≤¨ Ï†ïÎ≥¥ Îì±Î°ù
	@Transactional
	public PetResponse createPet(Integer userId, String name, Integer age, Boolean gender, String breed, Double weight, String profileImage) {
		log.debug("üì∏ Î∞õÏùÄ profileImage ÌååÎùºÎØ∏ÌÑ∞: {}", profileImage);

		// ÏÇ¨Ïö©Ïûê Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏ (ÏóÜÏúºÎ©¥ 404  ÏòàÏô∏)
		User user = userRepository.findByIdAndDeletedAtIsNull(userId) // userIdÎ°ú User ÏóîÌã∞Ìã∞ Ï°∞Ìöå
			.orElseThrow(() -> new PetException(HttpStatus.NOT_FOUND, PetExceptionType.NOT_FOUND_USER.getMessage()));

		// Ïù¥ÎØ∏ Ìï¥Îãπ userIdÎ°ú petÏù¥ Ï°¥Ïû¨ÌïúÎã§Î©¥ ÏòàÏô∏ Ï≤òÎ¶¨
		if (petRepository.existsByUserIdAndDeletedAtIsNull(userId)) {
			throw new PetException(HttpStatus.CONFLICT, PetExceptionType.ALREADY_EXISTS_PET.getMessage());
		}

		// Ïú†Ìö®ÏÑ± Í≤ÄÏ¶ù
		if (name == null || name.isBlank()) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.REQUIRED_PET_NAME.getMessage());
		}
		if (!name.matches("^[a-zA-ZÍ∞Ä-Ìû£0-9 ]+$")) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.INVALID_PET_NAME_FORMAT.getMessage());
		}
		if (name.length() > 10) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.INVALID_PET_NAME_LENGTH.getMessage());
		}
		if (breed == null || breed.isBlank()) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.REQUIRED_PET_BREED.getMessage());
		}
		if (age <= 0 || age > 50) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.INVALID_PET_AGE_VALUE.getMessage());
		}
		if (weight < 0.1 || weight > 200.0) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.INVALID_PET_WEIGHT.getMessage());
		}
		if (gender == null) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.REQUIRED_PET_GENDER.getMessage());
		}

		String profileImagePath = null;

		// soft-deleteÎêú Î∞òÎ†§Í≤¨ ÏûàÎäîÏßÄ ÌôïÏù∏
		Pet deletedPet = petRepository.findByUserIdIncludingDeleted(userId)
			.filter(p -> p.getDeletedAt() != null)
			.orElse(null);

		if (deletedPet != null) {
			log.debug("‚úîÔ∏è ÏÜåÌîÑÌä∏ ÏÇ≠Ï†úÎêú Î∞òÎ†§Í≤¨ Î≥µÍµ¨ Î°úÏßÅ Ïã§ÌñâÎê®");

			deletedPet.setDeletedAt(null);
			deletedPet.setUser(user);
			deletedPet.updatePet(name, profileImagePath, age, gender, breed, weight);
			return PetResponse.from(petRepository.save(deletedPet));
		}

		// ÏóîÌã∞Ìã∞ ÏÉùÏÑ± Î∞è Ï†ÄÏû•
		Pet pet = Pet.builder()
			.user(user)
			.name(name)
			.profileImage(profileImage) // Í∑∏ÎÉ• S3 URL Í∑∏ÎåÄÎ°ú Ï†ÄÏû•
			.age(age)
			.gender(gender)
			.breed(breed)
			.weight(weight)
			.build();

		return PetResponse.from(petRepository.save(pet));
	}

	// Î∞òÎ†§Í≤¨ Ï†ïÎ≥¥ Ï°∞Ìöå
	@Transactional(readOnly = true)
	public PetResponse getPet(Integer userId) {
		// ÏÇ¨Ïö©ÏûêÍ∞Ä Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏ (ÏóÜÏúºÎ©¥ 404 ÏòàÏô∏)
		User user = userRepository.findById(userId)
			.orElseThrow(() -> new PetException(HttpStatus.NOT_FOUND, PetExceptionType.NOT_FOUND_USER.getMessage()));

		// Ìï¥Îãπ ÏÇ¨Ïö©ÏûêÏùò Î∞òÎ†§Í≤¨ Ï†ïÎ≥¥ Ï°∞Ìöå (ÏóÜÏúºÎ©¥ 404 ÏòàÏô∏)
		Pet pet = petRepository.findByUserId(userId)
			.orElseThrow(() -> new PetException(HttpStatus.NOT_FOUND, PetExceptionType.NOT_FOUND_PET.getMessage()));

		return PetResponse.from(pet);
	}

	// Î∞òÎ†§Í≤¨ Ï†ïÎ≥¥ ÏàòÏ†ï
	@Transactional
	public PetResponse updatePet(Integer userId,  String name, Integer age, Boolean gender, String breed, Double weight, String profileImage) {
		// ÏÇ¨Ïö©Ïûê Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏ (ÏóÜÏúºÎ©¥ 404 ÏòàÏô∏)
		User user = userRepository.findById(userId)
			.orElseThrow(() -> new PetException(HttpStatus.NOT_FOUND, PetExceptionType.NOT_FOUND_USER.getMessage()));

		// Ïú†Ï†ÄÎäî ÏûàÏßÄÎßå Pet Ï†ïÎ≥¥Í∞Ä ÏóÜÎäî Í≤ΩÏö∞ (404 ÏòàÏô∏)
		Pet pet = petRepository.findByUserId(userId)
			.orElseThrow(() -> new PetException(HttpStatus.NOT_FOUND, PetExceptionType.NOT_FOUND_PET.getMessage()));

		// Î≥∏Ïù∏ Î∞òÎ†§Í≤¨Ïù∏ÏßÄ ÌôïÏù∏ (403 ÏòàÏô∏)
		if (!pet.getUser().getId().equals(userId)) {
			throw new PetException(HttpStatus.FORBIDDEN, PetExceptionType.REQUIRED_PERMISSION.getMessage());
		}

		// ÌïÑÏàò Í∞í Í≤ÄÏ¶ù
		if (name == null || name.isBlank()) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.REQUIRED_PET_NAME.getMessage());
		}
		if (!name.matches("^[a-zA-ZÍ∞Ä-Ìû£]+$")) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.INVALID_PET_NAME_FORMAT.getMessage());
		}
		if (name.length() > 10) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.INVALID_PET_NAME_LENGTH.getMessage());
		}
		if (age == null) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.REQUIRED_PET_AGE.getMessage());
		}
		if (age <= 0 || age > 50) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.INVALID_PET_AGE_VALUE.getMessage());
		}
		if (weight == null) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.REQUIRED_PET_WEIGHT.getMessage());
		}
		if (weight < 0.1 || weight > 200.0) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.INVALID_PET_WEIGHT.getMessage());
		}
		if (breed == null || breed.isBlank()) {
			throw new PetException(HttpStatus.BAD_REQUEST, PetExceptionType.REQUIRED_PET_BREED.getMessage());
		}

		// ÏàòÏ†ï
		String profileImagePath = profileImage != null && !profileImage.isBlank() ? profileImage : pet.getProfileImage();  // ÏÉà Ïù¥ÎØ∏ÏßÄ ÏóÜÏúºÎ©¥ Í∏∞Ï°¥ Ïú†ÏßÄ

		pet.updatePet(name, profileImagePath, age, gender, breed, weight);
		return PetResponse.from(pet);
	}

	// Î∞òÎ†§Í≤¨ Ï†ïÎ≥¥ ÏÇ≠Ï†ú
	@Transactional
	public void deletePet(Integer userId) {
		// ÏÇ¨Ïö©Ïûê Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏ (ÏóÜÏúºÎ©¥ 404 ÏòàÏô∏)
		User user = userRepository.findById(userId)
			.orElseThrow(() -> new PetException(HttpStatus.NOT_FOUND, PetExceptionType.NOT_FOUND_USER.getMessage()));

		// Î∞òÎ†§Í≤¨ Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏ (ÏóÜÏúºÎ©¥ 404 ÏòàÏô∏)
		Pet pet = petRepository.findByUserId(userId)
			.orElseThrow(() -> new PetException(HttpStatus.NOT_FOUND, PetExceptionType.NOT_FOUND_PET.getMessage()));

		// Î≥∏Ïù∏ Î∞òÎ†§Í≤¨Ïù∏ÏßÄ ÌôïÏù∏ (403 ÏòàÏô∏)
		if (!pet.getUser().getId().equals(userId)) {
			throw new PetException(HttpStatus.FORBIDDEN, PetExceptionType.REQUIRED_PERMISSION.getMessage());
		}

		pet.onSoftDelete();
		petRepository.save(pet);
	}
}
